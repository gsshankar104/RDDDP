name: Experimental RDP with Artifact Backup

on:
  workflow_dispatch:

jobs:
  build:
    name: Start RDP Session (HIGH RISK - USE WITH CAUTION)
    runs-on: windows-latest
    timeout-minutes: 350 # Max ~6 hours job limit applies regardless

    steps:
      - name: Check for Existing Backup Artifact
        uses: actions/download-artifact@v4
        with:
          name: litemanager-session-data
          path: C:\restore_temp # Download to a temporary location
        continue-on-error: true # Important: Continue even if no artifact exists on first run

      - name: Restore Data from Backup (If Exists)
        # *** CRITICAL: You MUST figure out the CORRECT paths where LiteManager stores its data ***
        # *** The paths below are GUESSES and likely WRONG. Adjust them! ***
        run: |
          if (Test-Path C:\restore_temp) {
            echo "Backup found. Attempting to restore data..."
            # Example: Copy restored data back to potential original locations
            # Adjust these target paths based on LiteManager's actual locations!
            echo "Restoring to AppData..."
            Copy-Item -Path C:\restore_temp\AppData\* -Destination "$env:APPDATA\LiteManager" -Recurse -Force -ErrorAction SilentlyContinue
            echo "Restoring to ProgramData..."
            Copy-Item -Path C:\restore_temp\ProgramData\* -Destination "$env:ProgramData\LiteManager" -Recurse -Force -ErrorAction SilentlyContinue
            echo "Restoring to Documents..."
            Copy-Item -Path C:\restore_temp\Documents\* -Destination "$env:UserProfile\Documents\LiteManager" -Recurse -Force -ErrorAction SilentlyContinue
            # Add more copy commands if LiteManager uses other locations

            echo "Data restore attempt finished. Cleaning up temp restore folder..."
            Remove-Item -Path C:\restore_temp -Recurse -Force
          } else {
            echo "No previous backup artifact found. Starting fresh session."
          }
        shell: pwsh
        # Important: This only restores FILES, not the running state of applications.

      - name: Download and Setup LiteManager
        run: |
          echo "Downloading required files..."
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/tollboxlap09/tollboxlap09/refs/heads/main/Downloads.bat" -OutFile "Downloads.bat"
          if (!$?) { echo "Download FAILED."; exit 1 }

          echo "Running setup script (Downloads.bat)..."
          cmd /c Downloads.bat
          echo "Setup script finished."
        shell: pwsh

      - name: Start LiteManager and Display Connection Info
        run: |
          echo "Starting LiteManager connection process (show.bat)..."
          echo "--------------------------------------------------------------------"
          echo "IMPORTANT: Check logs below for connection details (ID, Pass, URL)."
          echo "Connect using your LiteManager client."
          echo "Session will run until timeout (~6 hours) or manual cancellation."
          echo "Using GitHub Actions this way violates ToS and risks account suspension."
          echo "--------------------------------------------------------------------"
          # CRITICAL: show.bat must keep the process running in the foreground.
          cmd /c show.bat
          # If show.bat exits, the job will end. Consider a sleep loop ONLY if necessary
          # and if show.bat starts the server in the background.
          # Example: echo "show.bat finished? Starting keep-alive sleep..."; while ($true) { Start-Sleep -Seconds 60 }
        shell: cmd # Use cmd shell if show.bat requires it

      # --- Data Backup Section ---
      - name: Backup Specific Data to Artifacts
        # 'always()' ensures this runs even if the job is cancelled or times out early
        if: always()
        run: |
          echo "Attempting to backup specific configuration or data files..."
          # Create a directory structure within the backup folder
          mkdir C:\backup_data\AppData -ErrorAction SilentlyContinue
          mkdir C:\backup_data\ProgramData -ErrorAction SilentlyContinue
          mkdir C:\backup_data\Documents -ErrorAction SilentlyContinue

          # *** CRITICAL: You MUST figure out the CORRECT paths LiteManager uses ***
          # *** The paths below are GUESSES - Replace with actual paths! ***
          echo "Copying potential LiteManager data (adjust paths as needed)..."
          Copy-Item -Path "$env:APPDATA\LiteManager\*" -Destination C:\backup_data\AppData\ -Recurse -ErrorAction SilentlyContinue
          Copy-Item -Path "$env:ProgramData\LiteManager\*" -Destination C:\backup_data\ProgramData\ -Recurse -ErrorAction SilentlyContinue
          Copy-Item -Path "$env:UserProfile\Documents\LiteManager\*" -Destination C:\backup_data\Documents\ -Recurse -ErrorAction SilentlyContinue
          # Add more copy commands if needed for other locations

          echo "Backup copy attempt finished."
        shell: pwsh

      - name: Upload Backup as Artifact
        # 'always()' ensures this runs even if the job is cancelled or times out early
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: litemanager-session-data # Must match the download name
          path: C:\backup_data # The folder containing structured backup
          retention-days: 5 # Keep artifact for a few days
